import { EmailRequest, EmailResponse, EmailConfig, EmailLog, EmailStats } from '../types/email';
declare class EmailService {
    private transporter;
    private emailLogs;
    private config;
    private isEthereal;
    constructor(config: EmailConfig);
    private initializeTransporter;
    sendEmail(request: EmailRequest): Promise<EmailResponse>;
    sendUserRegistration(data: {
        firstName: string;
        lastName: string;
        email: string;
        verificationUrl: string;
    }): Promise<EmailResponse>;
    sendEmailVerification(data: {
        firstName: string;
        email: string;
        verificationUrl: string;
    }): Promise<EmailResponse>;
    sendPasswordReset(data: {
        firstName: string;
        email: string;
        resetUrl: string;
        expiryHours: number;
    }): Promise<EmailResponse>;
    sendUserInvitation(data: {
        email: string;
        inviterName: string;
        roleName: string;
        acceptUrl: string;
        expiryHours: number;
    }): Promise<EmailResponse>;
    sendEventInvitation(data: {
        email: string;
        eventName: string;
        eventDate: string;
        eventLocation: string;
        inviterName: string;
        acceptUrl: string;
        declineUrl: string;
    }): Promise<EmailResponse>;
    sendEventReminder(data: {
        email: string;
        eventName: string;
        eventDate: string;
        eventLocation: string;
        clientName: string;
        daysUntilEvent: number;
    }): Promise<EmailResponse>;
    sendInvoice(data: {
        email: string;
        invoiceNumber: string;
        clientName: string;
        total: number;
        currency: string;
        dueDate: string;
        downloadUrl: string;
    }): Promise<EmailResponse>;
    sendPaymentReminder(data: {
        email: string;
        invoiceNumber: string;
        clientName: string;
        amount: number;
        currency: string;
        dueDate: string;
        overdueDays: number;
        paymentUrl: string;
    }): Promise<EmailResponse>;
    sendVendorAssignment(data: {
        email: string;
        vendorName: string;
        eventName: string;
        eventDate: string;
        eventLocation: string;
        services: string[];
        contactPerson: string;
    }): Promise<EmailResponse>;
    sendDeliverableReminder(data: {
        email: string;
        deliverableName: string;
        eventName: string;
        dueDate: string;
        vendorName: string;
        daysUntilDue: number;
    }): Promise<EmailResponse>;
    getStats(): EmailStats;
    getLogs(limit?: number): EmailLog[];
    getLogById(id: string): EmailLog | null;
    clearLogs(): void;
    testConnection(): Promise<boolean>;
    getAvailableTemplates(): string[];
    isUsingEthereal(): boolean;
}
export default EmailService;
//# sourceMappingURL=emailService.d.ts.map